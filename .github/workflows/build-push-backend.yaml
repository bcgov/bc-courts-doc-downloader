name: Build & Push Document Downloader API Backend Image to Artifactory

on:
  push:
    branches: [develop]
    paths:
      - "src/backend/**"
      - ".github/workflows/build-push-backend.yaml"
  workflow_dispatch:
env:
  IMAGE_NAME: docdownloaderapi
  WORKING_DIRECTORY: ./
  TAG_VERSION: dev
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2   

      - name: Login to Artifactory
        uses: docker/login-action@v1
        with:
          registry: artifacts.developer.gov.bc.ca
          username: ${{ secrets.DOCDOWNLOADER_ARTIFACTORY_USERNAME }}
          password: ${{ secrets.DOCDOWNLOADER_ARTIFACTORY_PASSWORD }}
      
      # Get SHORT_SHA to tag images
      - name: Get short SHA
        id: short_sha
        run: |
          echo "::set-output name=SHORT_SHA::$(git rev-parse --short HEAD)"
          echo "Short SHA: $SHORT_SHA"

      - name: Docker Build Backend Image
        working-directory: ${{env.WORKING_DIRECTORY}}
        run: |      
          docker compose build docdownloader-api
          docker tag docdownloader-api artifacts.developer.gov.bc.ca/aaaa-docdownloader-api/${{ env.IMAGE_NAME }}:${{ env.TAG_VERSION }}
          
      - name: Docker Push to Artifactory
        id: publish
        run: |
          docker push artifacts.developer.gov.bc.ca/aaaa-docdownloader-api/${{ env.IMAGE_NAME }}:${{ env.TAG_VERSION }}
      
      - name: Checkout ArgoCD Repo
        id: gitops
        if: steps.publish.outcome == 'success'
        uses: actions/checkout@v4
        with:
          repository: bcgov-c/tenant-gitops-dc2d23
          ref: develop
          token: ${{ secrets.GIT_OPS_PAT }} # `GIT_OPS_PAT` is a secret that contains your PAT
          path: gitops

      - name: Update Helm Values and Commit
        id: helm
        if: steps.gitops.outcome == 'success'  # Only run if the previous step (publish) was successful
        run: |
          # Clone the GitOps deployment configuration repository
          # Navigate to the directory containing your Helm values file for the environment develop -> DEV, test -> test and 
          cd gitops/charts

          # Update the Helm values file with the new image tag and version
          DATETIME=$(date +'%Y-%m-%d %H:%M:%S')  # Get current date and time

          sed -i "s/apitag: .*/apitag: ${{ env.TAG_VERSION }} # Image Updated on $DATETIME/" ../deploy/dev_values.yaml

          sed -i "s/apitag: .*/apitag: ${{ env.TAG_VERSION }} # Image Updated on $DATETIME/" docdownloader-api/values.yaml
          
          # Commit and push the changes
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          
          git add .
          
          git add ../deploy/dev_values.yaml
          
          # Repackage Helm Chart      

          cd docdownloader-gitops

          helm dependency build
          
          cd charts

          git add .
          
          git commit -m "Update Dev API image tag"
          git push origin develop  # Update the branch name as needed

      - uses: fabasoad/data-format-converter-action@v0
        id: yaml2json
        with:
          input: "src/backend/DocDownloaderAPI/DocDownloader-spec.yaml"
          from: "yaml"
          to: "json"
      - name: Print result to JSON file
        run: echo '${{ steps.yaml2json.outputs.output }}' > docdownloader-api.json

        # Update API Specification in the service registry
      - name: Publish API Specification
        if: steps.helm.outcome == 'success'
        run: |
          set -e  # Exit on error
          
          IMAGE="${{ steps.meta.outputs.tags }}"
          IMAGE_TAG=$(echo "$IMAGE" | awk -F':' '{print $NF}')

          echo $IMAGE_TAG
          
          # Get access token from auth endpoint 
          
          export TOKEN=$(curl -X POST \
            ${{ secrets.AUTH_TOKEN_ENDPOINT }} \
            -H 'Content-Type: application/x-www-form-urlencoded' \
            -d grant_type=client_credentials \
            -d client_id=${{ secrets.REGISTRY_CLIENT_ID }} \
            -d client_secret=${{ secrets.REGISTRY_CLIENT_SECRET }} | jq -r '.access_token')
          echo "Access Token: $TOKEN"
          
          http_response=$(curl -s -o response.txt -w "%{http_code}" -X POST \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-type: text/plain; artifactType=OPENAPI" \
            -H "Authorization: Bearer $TOKEN" \
            -H "X-Registry-ArtifactId: docdownloader-api" \
            -H "X-Registry-ArtifactType: OPENAPI" \
            -d @docdownloader-api.json  \
            ${{ secrets.SERVICE_REGISTRY_HOST_URL }}/apis/registry/v2/groups/JUSTIN/artifacts?ifExists=UPDATE)
            if [ $http_response != "200" ]; then
                echo "Error: Failed to publish artifacts"
                
                echo "Server returned:"
                cat response.txt  
                exit 1
            else
                echo "Server returned:"
                cat response.txt    
            fi
        working-directory: ${{env.working-directory}}